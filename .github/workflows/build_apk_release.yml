name: Build APK and Publish Release

on:
  push:
    tags:
      - 'v*' # Trigger on new version tags (e.g., v1.0.0)
  workflow_dispatch: # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., 1.4.9)'
        required: true
        default: ''
        type: string

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Get Flutter packages
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Find APK file
        id: find_apk
        run: |
          APK_PATH=$(find build -name "*.apk" | head -n 1)
          if [ -f "$APK_PATH" ]; then
            echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT
          else
            echo "Could not find APK file" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.find_apk.outputs.APK_PATH }}

  publish-release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Get version from pubspec.yaml
        id: pubspec_version
        run: |
          VERSION=$(grep -E '^version:' pubspec.yaml | sed -E 's/version:[[:space:]]*//' | tr -d "'\"" | cut -d'+' -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Pubspec version: $VERSION"

      - name: Validate tag vs pubspec version
        if: github.event_name == 'push'
        id: validate_version
        run: |
          PUBSPEC_VERSION="${{ steps.pubspec_version.outputs.version }}"
          TAG_VERSION="${{ github.ref_name }}"  # e.g., v1.4.7
          TAG_VERSION_NUMBER="${TAG_VERSION#v}" # Remove 'v' prefix
          
          echo "Pubspec version: $PUBSPEC_VERSION"
          echo "Tag version: $TAG_VERSION_NUMBER"
          
          if [ "$PUBSPEC_VERSION" != "$TAG_VERSION_NUMBER" ]; then
            echo "❌ ERROR: Version mismatch!"
            echo "Pubspec.yaml version: $PUBSPEC_VERSION"
            echo "Git tag version: $TAG_VERSION_NUMBER"
            echo "These versions must match for tag-triggered releases."
            exit 1
          fi
          
          echo "✅ Version validation passed"

      - name: Determine final version and tag
        id: version_info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch - use input version
            FINAL_VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$FINAL_VERSION"
            SOURCE="manual"
          else
            # Tag push - use pubspec version (already validated)
            FINAL_VERSION="${{ steps.pubspec_version.outputs.version }}"
            TAG_NAME="${{ github.ref_name }}"
            SOURCE="tag"
          fi
          
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "source=$SOURCE" >> $GITHUB_OUTPUT
          echo "Using version: $FINAL_VERSION"
          echo "Using tag: $TAG_NAME"

      - name: Get app name from pubspec.yaml
        id: app_name
        run: |
          APP_NAME=$(grep -E '^name:' pubspec.yaml | sed -E 's/name:[[:space:]]*//' | tr -d "'\"")
          CLEAN_NAME=$(echo "$APP_NAME" | tr ' ' '_' | tr -cd '[:alnum:]._-')
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "clean_name=$CLEAN_NAME" >> $GITHUB_OUTPUT

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: artifacts

      - name: Rename APK file
        id: rename_apk
        run: |
          NEW_FILENAME="${{ steps.app_name.outputs.clean_name }}_${{ steps.version_info.outputs.tag_name }}.apk"
          mv artifacts/app-release.apk "artifacts/$NEW_FILENAME"
          echo "NEW_FILENAME=$NEW_FILENAME" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version_info.outputs.tag_name }}
          name: ${{ steps.app_name.outputs.app_name }} ${{ steps.version_info.outputs.tag_name }}
          body: |
            Automated release for ${{ steps.app_name.outputs.app_name }}
            
            **Version**: ${{ steps.version_info.outputs.final_version }}
            **Tag**: ${{ steps.version_info.outputs.tag_name }}
            **Source**: ${{ steps.version_info.outputs.source }}
            **Build date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            Built with GitHub Actions 🚀
          files: artifacts/${{ steps.rename_apk.outputs.NEW_FILENAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show release info
        run: |
          echo "🎉 Release created successfully!"
          echo "App: ${{ steps.app_name.outputs.app_name }}"
          echo "Version: ${{ steps.version_info.outputs.final_version }}"
          echo "Tag: ${{ steps.version_info.outputs.tag_name }}"
          echo "Source: ${{ steps.version_info.outputs.source }}"
          echo "Filename: ${{ steps.rename_apk.outputs.NEW_FILENAME }}"
