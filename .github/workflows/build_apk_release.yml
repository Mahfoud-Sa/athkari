name: Build APK and Publish Release

on:
  push:
    tags:
      - 'v*' # Trigger on new version tags (e.g., v1.0.0)
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to get all tags for manual runs

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Get Flutter packages
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Find APK file
        id: find_apk
        run: |
          APK_PATH=$(find build -name "*.apk" | head -n 1)
          if [ -f "$APK_PATH" ]; then
            echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT
          else
            echo "Could not find APK file" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.find_apk.outputs.APK_PATH }}

  publish-release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permission for GITHUB_TOKEN to create releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to access git tags

      - name: Get tag name
        id: get_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tag pushes - use exact tag (e.g., V123)
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual runs - latest tag + _m + run_number (e.g., V123_m456)
            LATEST_TAG=$(git describe --tags --abbrev=0)
            if [ -z "$LATEST_TAG" ]; then
              echo "::error::No existing tag found to base manual release on"
              exit 1
            fi
            echo "tag_name=${LATEST_TAG}_m${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Get app name from pubspec.yaml
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | awk '{print $2}' | tr -d '"' | tr -d "'")
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          name: ${{ steps.app_name.outputs.app_name }} ${{ steps.get_tag.outputs.tag_name }}
          body: "Automated release for ${{ steps.app_name.outputs.app_name }} version ${{ steps.get_tag.outputs.tag_name }}"
          files: app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
